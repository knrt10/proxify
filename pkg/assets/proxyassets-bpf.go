// Code generated for package assets by go-bindata DO NOT EDIT. (@generated)
// sources:
// bpf/bpf_proxy_dispatch.o
package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bpf_proxy_dispatchO = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x59\x6b\x6c\x1c\xd5\x15\xfe\x66\x5f\x5e\xef\xc6\xce\x26\xde\xcd\xda\x79\x90\x71\x13\x1c\x13\x92\x5d\x27\x71\x8c\x21\x2f\xdb\xe4\xe5\x10\x95\x40\x42\x48\x28\x74\x58\xaf\xc7\xf6\x76\xd7\xbb\xcb\xcc\xac\xe5\x44\xbc\xaa\x42\x9b\x52\x1e\xfd\x51\x48\x8a\x80\x84\x67\x53\x1e\x15\xa5\x2a\x11\x52\xa5\x84\x4a\xb4\x54\x6a\xa5\xfc\xa0\x2a\xa5\x52\xc3\x8f\xaa\x54\x4a\x1f\xb4\x6a\x95\x16\xa8\x5c\x9d\x3b\xf7\xee\xdc\x9d\xf8\x26\x95\xda\x91\xec\xb9\xdf\x77\xee\xb9\xe7\xdc\x73\x1f\x73\xee\xdd\xfb\xb6\xed\xde\x1e\xd0\x34\x88\x47\xc3\x05\x78\xc8\x7b\x4e\x2e\xf5\xca\x03\xfc\xff\x02\x68\x38\xbd\xc0\xe5\x4e\x71\xa5\xfc\xc2\xcf\x66\xe8\x9d\xcb\x6d\x64\xb8\xb8\xf0\x13\x86\x4f\x3f\xe7\xca\x9b\x02\xc0\x27\x33\x33\x33\xed\x3e\x23\x0f\x32\xdb\xc0\x69\xce\x9f\xe2\x38\xa5\xcd\x87\x5f\xff\xb3\x4b\xe9\x37\x79\xfa\xf4\xa4\x9a\x62\xae\x7e\xce\xc5\xa7\x2d\x2e\x0f\x7a\x7a\x77\x13\x1f\xe1\xf2\xbb\x3c\x7e\xbf\xec\x47\x44\x6b\x68\xf7\xf1\x7a\xbc\x80\x00\x7f\x23\xe4\x72\x73\x79\x31\x2a\x78\x00\x3b\xf6\xec\x46\xbe\x94\x2b\x8f\xeb\x53\xa6\x65\x17\x2a\x65\x7d\x4d\x4f\xa6\x27\xd3\xb3\xba\xb7\x36\x52\x2b\x3b\xb5\x35\x3a\x46\xaa\x63\xd9\x91\xea\x98\x51\xb5\x2a\xd3\x87\x8c\xd1\x82\x5d\xcd\x39\xf9\x89\x4c\x1e\xd9\x89\xca\xa4\x99\x2d\x3a\x56\xa1\x9a\x73\x26\x0a\xd9\x51\x73\x2a\x5b\xb1\xed\x2c\x55\x2c\x8c\x1d\x82\xab\x50\xad\x58\x8e\x0d\xe7\x50\xd5\x44\xad\x6c\x17\xc6\xcb\xe6\xa8\x5e\x28\x3b\x28\x9a\x87\x0c\xbb\x70\xd8\xc4\x54\xae\x54\x33\xdd\xe2\x64\x6e\xda\x30\xcb\x8e\x55\x30\x6d\x4c\xe6\xaa\xc6\x58\x29\x37\x6e\x93\x03\x06\xa1\x51\x73\x8c\xb7\x69\x57\xf2\x45\x18\xa5\x42\xde\x2c\xdb\x26\xf2\x13\x39\x0b\x86\x31\x78\xf3\xcd\x83\x07\x8d\xbd\xc3\xb7\x6d\x33\xf6\x1d\xdc\xb3\xcd\x30\xea\x8a\xa5\x4a\xa5\x58\xab\x1a\x66\xc9\x9c\x64\x9c\x5d\x34\x72\x36\xb9\x82\x52\xa5\x3c\xce\xbc\x61\x05\xf6\xaf\xc1\x49\xc3\xa8\xf5\xf5\x0a\x1d\xcb\x2c\x99\x39\xdb\xc4\xde\x1b\x8c\xad\x37\xdf\xb8\x87\xde\x7b\x06\xf7\xee\x05\x35\x97\x77\x0a\x95\x32\x78\x98\xc6\x41\xba\x79\x67\x1a\x76\x11\x23\x95\x5a\x79\xd4\x18\x35\xa7\x8c\xc2\x18\xb5\xb7\x6e\x2d\xc6\x72\x93\x85\x12\x8b\x8f\x53\xc9\x57\x4a\x98\xcc\x59\x45\x54\xad\x42\xc5\x2a\x38\x87\x60\x5b\x79\xa3\x50\xed\xe5\xef\x3e\xf6\xa6\x20\x62\xd4\x76\xbc\x02\xd5\x70\xdf\x7d\xb0\x9d\x9c\x63\xc2\x9a\x36\xee\xaa\x99\x35\x93\xba\x5c\x2d\x94\xc7\x61\x18\xf6\xba\xb5\xae\xf3\x14\xaf\x7c\xa5\x52\x2c\x98\xb0\xcc\xc9\x8a\x63\x32\xfd\x7a\xb1\x4f\x14\x59\xf3\xa5\x4a\x3e\x57\x62\x15\x44\xa9\x8f\x97\x98\x98\x47\xc3\x0d\x2a\x0e\x9b\x56\x05\x8c\xaf\x07\xce\x9e\x20\x68\x18\xb5\x35\x7d\xa8\x54\xcd\xb2\x27\xe1\x23\x55\xeb\x87\x69\x59\xf5\x35\x92\xa8\xcf\xd9\x9b\x44\xf1\x6c\x9d\xda\xef\x5f\xf1\xa2\xca\x04\x7f\x07\xd0\x73\x5c\x94\xff\x59\xe7\x0e\x87\xfc\x7a\x3a\x7f\x77\x7b\xd6\x44\x51\xac\x86\x00\x0e\x07\xfc\x6a\x07\xf8\xfb\x88\xa7\xe6\xaf\x72\xcc\x67\x5d\xc3\xad\xfe\x2a\x67\x2f\xaa\x72\x51\xbf\xb4\x79\xda\x95\xad\x6d\xe1\x60\x6b\x22\xbd\xa8\x75\x9e\x36\x3f\x02\x04\x7a\x11\x6c\x1d\x6e\xdb\xd2\x71\x5d\x7c\x43\x3c\xd0\x0e\x04\xdb\xb4\x60\x6b\x3c\x4e\x10\x08\xb5\x30\x29\x81\xfe\x38\x10\x5e\x8e\x60\xeb\xe6\x78\x3c\x0e\x44\x34\x6d\xb8\x0d\x68\xea\xc4\x70\xdb\x35\x71\x20\x4a\xa2\x78\x7c\x73\x1c\x68\xee\xad\x2b\x01\xb1\xb9\xa0\x7a\xf1\x94\x36\xdc\xb6\xa2\x03\x98\x13\x66\xb8\x85\x36\x8a\xd6\x2e\xda\x31\xea\xb5\xc3\x40\x62\x01\x86\xdb\x82\xad\xae\xea\xbc\x90\x46\x80\xf9\x12\x06\xe6\x77\x23\xd8\xba\x78\x2e\xd0\x96\xd1\xc8\xf7\x81\xf6\xa3\x43\x1d\x6e\xdd\x15\x1d\xd4\x03\x20\x19\x46\x20\xed\x52\x64\x24\xd5\xdb\x00\x17\xd4\x7b\x16\x06\xd2\x2d\x70\x8d\x52\xbf\xda\xd3\x9a\xe0\x3b\x04\x7f\x44\x9b\x4b\xa2\x85\x42\x74\x44\x9b\x0b\x2c\xaa\xc7\x83\xe9\x2d\xee\x62\x9d\xc1\x77\x83\x62\x03\x8c\xb2\x61\x9e\xe3\x0f\x7c\x7d\x0a\xb0\xb1\xdf\x42\xf3\x20\xd1\x1c\x14\x3c\x2b\x24\xb5\x87\x58\x13\x0f\x50\xc5\x6f\xc0\x2b\x3f\x1c\xf2\xca\x8f\x44\xbd\xf2\xa3\x73\xbc\xf2\x63\x09\x84\x09\x34\x85\x3c\x03\xed\x9e\x01\x46\xfe\x90\x0a\xfd\x1e\x19\x79\x9b\x14\xde\x65\x1b\x36\x53\x8e\x68\x51\xd6\x85\xa6\x66\x7a\x7d\x40\x8e\xad\x89\x9d\x03\x10\xff\x0b\xf5\x89\xfd\xfb\x98\x44\x2d\xb1\x7f\xd0\xe8\xcd\x65\x4d\x6b\x40\xf0\xe5\x78\xac\x49\x03\xe2\x8b\x35\x51\x8f\xfd\x5b\x46\xc1\x60\x4d\x87\xa3\x89\x0c\x5f\x00\xa1\xa5\xae\xa7\x51\xa6\x3e\x48\xea\x27\xa3\xb1\xed\x0d\xea\x98\xf7\x00\x77\x32\x14\x7e\x37\xe9\x7e\x05\xe7\xbb\x11\x6c\x93\xa3\xa9\xdd\xc6\x5c\xe8\x3c\xa7\x01\xc9\x7a\x67\x3b\x7f\xaf\x01\xa9\x3e\x01\x97\xdd\x1b\x04\x52\x65\x01\xaf\xfc\x0a\xc1\x17\x05\xec\x7a\x9c\xe0\xbb\x02\x2e\x3f\x1a\x00\x52\xe7\x05\x5c\xb1\xd8\xeb\x42\x28\x76\x5e\x03\xd8\x37\x7f\x20\xfc\x44\x3a\xfd\x6f\x0d\x08\x1f\x4d\xa3\x3d\x1a\x3e\x9a\xee\x98\x13\x00\xc2\xc7\xd2\x51\x2c\x8c\xd2\x6b\x11\x55\x3b\xea\x72\x00\x43\x14\x8d\xf0\xb7\x05\xba\x3d\x08\x84\x9f\xe2\x15\x19\x78\x3a\x3d\xc7\x03\xcf\xa4\x13\x0c\x8c\x13\x38\x9e\x4e\x7a\x92\x13\xe9\xe5\x1e\x78\x36\xdd\xed\x55\x7b\x2e\xbd\xca\x93\x3c\x9f\xde\x88\xd8\x53\x01\xee\xf0\x9e\xf0\x26\xa9\x89\xcd\x49\xc9\x87\x2d\xc9\x90\x07\x06\x92\x92\x43\x83\x49\xc9\xa1\xa1\x64\xc2\x03\xd7\x27\xa5\xd6\xb6\x25\xdb\x3d\x1f\xb6\x27\x17\x7b\x92\x1d\x49\xc9\xa1\x9d\xc9\x1e\x0f\x0c\x27\x7b\x3d\x9d\x5d\xc9\x7e\x4f\x72\x43\x72\x27\x03\x36\x81\xdd\xc9\xdd\x48\xd4\xa7\xc2\xa2\x08\xd5\xe0\x33\x36\x71\x4e\xcc\xa7\x85\x8b\x89\x4e\x3c\xca\x27\x76\xa8\xdd\x9d\x5f\x81\xd8\x93\x44\xbf\x28\xe8\x14\xa3\xa3\x1a\x8e\x9f\xd7\xd0\xce\xdb\xdc\x1a\x70\xff\xde\xf2\xf6\xe4\x80\x48\x69\x9a\x81\xd0\x80\xbc\x42\x79\x7a\x13\xe5\x69\xe0\x02\x5e\xbe\x13\xc0\x52\x5e\xbe\x1f\xc0\x4a\x00\x94\x78\x9d\x00\xb0\x9e\xf3\xba\x06\x0c\x0a\x5d\x0d\xb8\x81\xd7\xb9\x53\x03\x6e\xe1\xfc\x87\xf5\x2f\x04\xc2\x51\xd1\x67\xfe\x26\x1b\x11\x40\x9e\xfb\xac\xce\xb8\x98\x9d\xde\x13\x48\x03\xf8\x92\x5b\x8e\x52\x46\x58\xe5\x2a\xc2\xef\xaf\x71\x19\xad\xf2\x47\xb8\x2c\x24\x7d\xbc\x44\x77\xa9\x7e\x9c\xfb\xf0\xe4\x2c\xf5\x34\xa0\xa5\x05\xc0\xf7\x78\xbc\xde\x68\xac\xa3\xbd\xe9\xf2\x73\x68\x33\xbc\x3e\xc0\xfc\x0c\xd1\x22\xbd\x31\xc0\x62\xcb\x9e\x7d\xbc\x4c\x6d\xde\xc1\xcb\xe4\xe3\x04\x2f\x53\xbf\x1d\x5e\xa6\xd8\xde\xeb\x8e\x13\xdb\x7a\xc8\xe6\x43\x3e\xfc\xb8\x8b\x59\x52\x1f\xf5\x32\x50\xd6\x9f\xf9\x72\x7f\xb8\x5e\x1b\xd7\x7b\x3e\xc0\xde\x6c\x4b\x4a\x4a\xb1\x7f\x25\xc0\xc6\x83\xf1\x22\x29\x20\xf9\x3c\xa9\xfc\xba\xdb\x96\x9b\x7c\x37\x26\x2e\xfe\x24\xec\x7f\xce\x8b\x78\x7e\x65\x17\x79\xd6\xa8\x4e\x29\xd7\xad\x85\x8f\xba\x38\x77\xa5\xec\x91\x64\xf5\x94\xb2\xee\x79\xb6\x31\x11\xbf\x5c\x1a\x9e\x55\xe6\xef\x85\xb2\xa3\x8b\xe6\xbb\x6d\xc7\xaa\xe5\x5d\x5c\xb7\xa4\xaf\xcc\x3b\xd3\x57\x41\xd7\xf3\x95\xb2\xed\xe8\xcc\x73\x9d\x12\x3e\x7d\x93\xde\xb3\x01\xba\x4e\xfd\xd6\x37\xe9\x79\x67\x7a\xf5\x66\x2f\x12\x24\xa1\xbc\x4f\xdf\xa4\xcf\x92\x81\x77\x77\x49\xe7\x82\x55\x7a\x17\xbd\xaf\x22\x95\xc2\x98\xde\xdd\x49\x7a\x64\xd1\x2e\x5e\x5a\x9b\x32\xda\x55\x7a\x17\x39\xe3\x29\xdb\x45\x52\x35\x2d\x8b\xeb\xd6\xf3\xfc\xee\xbc\x33\xbd\x4a\xb7\x8b\xab\xf4\x1e\x56\xbb\x31\xa1\xef\xb6\x8b\x8c\xb5\x4c\xa7\x66\x95\x99\xfe\x16\x9d\x27\xf9\xfa\x75\x3a\x4f\xf3\x37\xe0\x9e\x86\x93\x08\x3b\xd1\xfc\xf7\x87\x18\xf9\x30\x24\x1d\x62\xdc\x8c\x58\x9c\x64\xc4\x7b\x32\x57\xb5\xbd\xc4\x9d\x36\x45\x5d\x9a\xd4\xf4\xf7\x19\x4d\x7a\xbe\x84\x68\x33\x38\x2d\x9d\xe9\x5a\xf9\x82\x38\xcd\x37\x45\x7a\xde\xa7\x85\xa1\xb9\x29\x49\x82\xe3\x6b\x69\x55\x3d\x0c\xb6\xe1\x12\xbe\x89\xf0\x0b\xee\x82\x17\x38\xfa\x02\xd0\xc3\xb1\x78\xfa\x39\x2e\x6a\x40\xec\xa4\xbb\x11\x10\x7e\x46\x03\x9a\x5e\x75\x37\x35\xb9\xfe\x34\xc7\xaf\x50\x7b\x3f\x72\xf3\x65\x59\x7e\x82\xe3\xdf\x90\xfe\x19\xe0\x24\xc7\x94\x2a\x34\xff\xdc\x4d\x9e\x09\x37\x07\x80\xe0\x59\xe0\x0f\x1c\x2f\x0d\x00\xb1\xf7\xdc\xa4\x9a\xf0\x20\x6d\x14\xbc\x61\xda\xd8\x66\x66\x66\x66\x42\x88\x22\x7a\x77\xdc\xcb\x40\xe0\xed\x90\xf4\x74\x69\xb4\x99\xfc\x84\x7d\x7d\xb4\x4f\x5b\x5b\xa0\x69\x6c\x83\xa2\x04\xa6\x54\x28\xd7\xa6\x57\xaf\xcf\xac\x59\x97\x75\x2a\x95\x92\x9d\x2d\x15\x46\x68\x25\xd1\xc8\x40\x12\xd6\x6c\x2b\x5b\x28\xe7\x4b\xb5\x51\x33\x9b\xb3\x27\x57\x8f\x9b\x65\xd3\x2a\xe4\x55\x55\x18\xed\xee\x46\x13\x66\xa9\x6a\x5a\x76\x66\x82\xec\xcd\xba\x46\x03\x72\x45\x9a\x77\xbc\x72\xa1\xec\xac\x2e\x95\xfa\x7a\x33\x13\xb4\x81\x8e\x54\xc7\x32\x13\x6c\x53\x0c\x05\x58\x98\xf8\xd6\xda\xa9\x85\xe7\xc6\xb2\x5d\xe1\x68\x44\x0f\xde\xaa\x87\x63\x91\xe0\xca\x4c\x24\xb8\x7f\x57\xb8\x29\x12\xbc\x5a\x8f\x04\x6f\xd1\xc3\xd1\x48\x30\x9b\x09\x23\x12\xbc\x89\xb1\x3d\x7a\xb8\x79\x59\x38\x78\x30\x12\xdc\x9d\xa1\xfa\xeb\xf5\xb0\x96\x0d\x68\xd0\x66\xbb\x7c\x91\x9e\x1f\xb3\x4d\xf9\xaf\x33\xb3\x4b\x9b\x14\x5a\x4d\x58\xaa\xe0\xfb\x15\xfc\x01\x05\x3f\xaa\xe0\x0b\x0a\x7e\x4a\xc1\xdf\xa7\xe0\x1f\x52\xf0\x4f\x28\xf8\x13\x0a\xfe\x55\x05\x7f\x4a\xc1\x9f\x51\xf0\xef\x28\xf8\x5f\x2b\xf8\x3f\x29\xf8\x4f\x15\x7c\x68\xd6\xf1\x6e\xc2\x22\x05\xdf\xa9\xe0\x7b\x14\x7c\xbf\x82\x1f\x50\xf0\xbb\x14\xfc\x5e\x05\x7f\xab\x82\xff\x82\x82\xff\xa2\x82\x2f\x2a\xf8\xbb\x14\xfc\xb4\x82\xff\xb2\x82\xff\xaa\x82\x7f\x4c\xc1\x1f\x55\xf0\xc7\x15\xfc\x49\x05\xff\x7d\x05\xff\x96\x82\x7f\x5b\xc1\xff\x54\xc1\xbf\xaf\xe0\x7f\xab\xe0\x3f\x52\xf0\x7f\x56\xf0\xff\x52\xf0\xa1\x8b\x2e\x70\x5c\x3e\xa1\xe0\x17\x2a\xf8\xe5\x0a\x3e\xab\xe0\x37\x29\xf8\x21\x05\xbf\x43\xc1\xef\x57\xf0\xb7\x2b\xf8\x9c\x82\xaf\x28\x78\xc7\xc7\xb3\x3b\x03\x04\xeb\x17\x53\xf2\x13\xac\x1f\xad\xfc\x7c\x54\xc1\x37\x2b\xf8\x84\x82\x9f\x7f\x11\xf7\x08\x4b\xe0\xbd\xe3\x94\x38\x64\x4d\xb1\x43\x82\xe4\x0f\x1f\xff\xcf\xb1\xfa\xde\x31\x4b\x7c\xe7\x3f\xcf\xf9\xa4\x8f\xef\x97\xd4\xb7\xf3\xdc\x44\xe0\x1d\xd2\x41\x8e\x0e\x80\x83\xd2\x6d\x51\x8c\xdf\xd4\xcc\x97\x70\x90\x1f\x34\x05\xbe\x1e\xc0\x42\x09\x93\xef\x57\x48\xed\x6f\x01\x70\xb5\x24\x27\xaf\xaf\xf1\xf9\x33\x20\xc9\xc9\xf6\x4e\x09\x93\x6f\xfb\x24\x2c\x0e\xb8\x02\x53\xf4\x4b\x12\x8e\x49\xfd\x8b\xf1\x03\xd6\x83\x12\xa6\xaf\xf2\xc3\x12\x6e\x91\xee\x32\x45\x3c\x9e\x95\xe4\x94\x57\xbe\x26\xc9\xb7\xf2\xef\xbe\x90\x53\xae\xf9\x33\x09\x27\xa4\x8b\xcf\x18\x3f\x98\x5d\x90\x30\xc5\x72\x89\xe6\x61\x3a\xf0\x75\x4b\x38\x05\x20\x2b\x61\x1a\xc3\x3e\x09\x53\xec\xf7\x4b\xb8\x03\x80\x21\x61\x3a\x6c\x9b\x12\xa6\x3c\xb7\xa4\x35\x8e\xc7\x61\x49\x4e\x63\xf7\xa0\x84\x69\x2c\xbe\x2e\xe1\xc5\x00\xbe\xe5\x93\x1f\x93\x70\x1f\x1d\x56\x7d\xf2\xef\x48\x98\xc6\xfa\x0d\x9f\xfc\x4d\x09\x5f\x07\xd4\xf7\x59\x21\x7f\x47\xc2\x4b\x28\x9e\x3e\xf9\x7b\x12\xde\x24\x5d\x54\x10\x5e\x04\xe0\x8f\x12\x5e\x4f\x31\x0e\x34\xb6\xd7\x29\xe1\x0c\xc5\x5b\xc2\x74\x0e\xd8\x28\xe1\x4e\x00\xc3\x12\xce\x52\xfc\x25\x4c\xe7\x84\xbc\x84\xd7\x00\xa8\x4a\x78\x2d\x80\x7b\x24\xbc\xce\xbb\x24\x60\xb8\x17\xc0\xd3\x12\x5e\x0d\xe0\x25\x09\xd3\x5a\xfa\x81\xcf\xbf\x33\x12\xa6\xf5\xf1\x0b\x9f\xbf\x1f\x48\x98\xf6\x8a\x8f\x24\xbc\x0c\xc0\xdf\x25\xbc\x9c\xe6\x45\xd0\xc3\x57\xd2\x9c\x97\x70\x17\xc5\x54\xc2\x2b\x68\xbe\x4a\xb8\x9b\x62\x2c\xe1\xab\x00\x0c\x49\x78\x25\x80\x1b\x25\x4c\x7b\x41\x4e\xc2\x94\x0b\x4f\x4b\x78\x15\x80\x23\x12\xbe\x16\xc0\x63\x12\xa6\xbd\xec\xb8\x84\x37\x52\xbc\x24\xbc\x81\xfa\x24\xed\xf7\x5b\xa5\xf1\x04\xdf\x6f\x76\x4a\x78\x07\xb7\x29\x9e\x2d\xd2\x7e\x24\xf0\x1e\x1f\xbe\xd3\x87\xab\x3e\x7c\xbf\x0f\x7f\xd3\x87\x4f\xf8\xf0\xeb\x3e\x7c\xc6\x87\xcf\xfa\xf0\x87\x3e\xfc\xb1\x0f\xcb\x3f\x1a\x6f\x91\xce\xcc\x02\xeb\x3e\x2c\xbe\x13\x14\xbf\x21\xbe\x67\x40\xda\x2f\x7e\xe9\xc3\xdb\xb6\xef\xd8\x8a\xcc\xa8\x39\x52\x1b\x37\x72\x23\x23\x96\x39\x85\x8c\x63\x4e\x3b\xc8\x58\x66\x29\x33\xb4\x6f\x7b\x86\x80\x7c\xf8\x67\x67\x7b\xae\x61\x3b\x96\x5b\xd1\x85\x85\xf2\x58\x45\xbe\x1c\x20\x91\xf2\xda\xa7\x7e\x31\x94\x29\x95\xa6\x26\x8d\xdc\xe8\xa8\x65\x17\xc6\xbd\xbb\x04\xa9\xdd\x52\xa1\xdc\x80\xc7\xac\xdc\xa4\x29\x7c\x28\x55\xf2\xb3\x1f\x3d\x33\xb6\x63\x39\xb9\x11\x64\xec\x43\x93\xec\xcd\x7b\x84\xdd\x43\x43\x3d\x46\x2f\xfe\x2f\xcf\xaf\xa4\x0b\x5c\xf9\x79\x95\x7f\x38\x2f\xf8\x78\x7f\xda\x27\x2e\x17\x23\x3e\x7e\x40\x61\xcf\xff\xb3\xe0\x1d\x97\xd3\xf7\x19\xf4\x67\x3e\x07\x81\x59\xb3\x9e\x03\x7c\xe2\x88\x7b\x9b\x14\xef\xa7\xd0\x17\x19\x51\x86\x9b\xf0\xc7\x40\x9c\x83\xba\x2f\xe3\xff\xa3\x0a\xfd\x09\x6d\xf6\xfa\xfe\xf8\xad\xe3\x5c\x8f\x8f\x17\xdf\xc9\xe9\xc0\xec\xfa\xe2\x7d\x6a\x96\x36\xe9\xf9\x1d\x77\xa8\x55\xbb\xb4\x7d\x4d\xa1\xff\x37\xee\xf8\x81\xcb\xe8\x0f\x29\xf4\x77\xf1\x01\x7d\x2d\x78\x69\xfd\xcd\x8a\xf1\x9b\xe6\xe3\x77\x96\xfb\x91\x92\x72\x2e\x48\xe3\x77\x5e\x61\xff\x02\x6f\x34\x15\xbe\xb4\xfd\x8f\x14\xf6\x77\x2e\x71\xdf\x62\x5c\x52\x3c\x1f\xf4\xdb\xef\x50\xd8\x9f\xc3\x2f\xfe\xfc\xe7\x6f\x7f\xdd\x94\xaa\xff\x4b\x1a\x15\x52\x3c\xff\xf3\xdb\x7f\x59\x61\x7f\x80\x57\xf0\xcf\x5f\xff\xfa\x79\x49\x65\x9f\xaf\x7f\x79\xfd\x24\x66\xb1\xff\xa4\xc2\xfe\x04\xaf\xb0\xf2\x32\xfd\x7f\x42\x61\xff\xd8\x15\x8d\x76\x52\x3c\x5f\xf5\xdb\xbf\x8f\xd6\xde\xee\x99\x8a\xef\x53\x87\x93\x5c\x3f\x24\xe9\xcf\x66\xff\x9c\xf8\x05\xd8\x6f\x9f\xff\x8a\x71\x26\xe2\xe9\x6d\x95\xec\x8b\xef\xd2\x7f\x02\x00\x00\xff\xff\x32\xea\x85\x0c\x28\x25\x00\x00")

func bpf_proxy_dispatchOBytes() ([]byte, error) {
	return bindataRead(
		_bpf_proxy_dispatchO,
		"bpf_proxy_dispatch.o",
	)
}

func bpf_proxy_dispatchO() (*asset, error) {
	bytes, err := bpf_proxy_dispatchOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bpf_proxy_dispatch.o", size: 9512, mode: os.FileMode(436), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bpf_proxy_dispatch.o": bpf_proxy_dispatchO,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"bpf_proxy_dispatch.o": &bintree{bpf_proxy_dispatchO, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
